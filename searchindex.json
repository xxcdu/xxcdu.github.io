[{
  "section": "Blog",
  "slug": "/blog/django%E5%9F%BA%E7%A1%80/",
  "title": "Django基础",
  "description": "this is meta description",
  "date": "April 4, 2022",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_q80_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"184\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_q80_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Application, Data",
  "tags": "nextjs, tailwind",
  "content":"一、虚拟环境 1、建立虚拟环境 python -m venv xxcdu\n2、激活虚拟环境 windows：xxcdu/Scripts/activate linux：source xxcdu/bin/activate\n3、停止使用虚拟环境：deactive\n二、Django创建项目 1、创建项目：Django-admin startproject learning_log . learning_log目录下urls.py：创建哪些页面来响应请求，wsgi.py（web服务器网关接口）帮助Django提供他创建的文件\n2、创建数据库：python manage.py migrate\n3、启动server：python manage.py runserver （若指定端口被占用，执行python manage.py runserver 8001（换端口））\n4、创建、激活程序： （1）创建应用程序·python manage.py startapp learning_logs learning_logs目录下文件：admin.py apps.py migrations models.py：定义模型 tests.py views.py （2）在models.py中定义模型； （3）在learning_log/settings中添加程序“learning_logs”（添加到默认应用程序上方） （4）让Django修改数据库以存储新模型相关信息：python manage.py makemigrations learning_logs （5）迁移数据库 ： python manage.py migrate (6) 修改网站管理数据三个步骤：修改models.py; 对learning_logs调用makemigrations; 让Django迁移数据库。\n5、Django管理网站： 创建超级用户：python manage.py createsuperuser\n6、向管理网站注册模型： from .models import Topic admin .site.register(Topic)\n7、通过外键将条目与主题关联：(Entry指条目，Topic指主题，on_delete = models.CASCAD指绑定的二者级联删除) class Entry(models.Model): topic = models.ForeignKey(Topic, on_delete = models.CASCAD)\n8、Django shell：python manage.py shell .all()函数获取该模型所有实例：topics = Topic.objects.all( ) 返回一个查询集的列表。\n9、Django创建页面：定义URL、编写视图、编写模版。 定义URL将浏览器请求与URL匹配，每个URL被映射到特定视图，视图函数通过模版来渲染页面。 （1）映射URL： 1、在learning_log目录下的urls.py中添加整个项目中应用程序的URL。 2、添加模块admin.site.urls,定义可在管理网站请求的所有URL : path(\u0026lsquo;admin/\u0026rsquo;, admin.site.urls) 3、添加应用learning_logs的URL：path(\u0026rsquo;\u0026rsquo;, include(\u0026rsquo;learning_logs.urls\u0026rsquo;)) 4、在应用learning_logs\t中添加urls.py,添加应用中文件的path：path（\u0026rsquo; \u0026rsquo; , views.index, name=\u0026lsquo;index\u0026rsquo;）#该对象看作一个URL模式 path( )函数三个参数：第一个参数是字符串path（\u0026rsquo; \u0026lsquo;在本地即https://localhost:8000/）；第二个参数指定要调用views.py中的哪一个函数，此处是views.py中的index；第三个是为该URL指定名称“index”便于引用。 （2）编写视图：在应用learning_logs中的views.py编写index函数，在index函数中调用render函数使用模版渲染。 def index(request):#request为Django从服务器接收到的request对象 return render(request, \u0026rsquo;learning_logs/index.html\u0026rsquo;) （3）编写模版：编写learning_logs/index.html 1、编写父模版base.html,与index.html置于同一目录下：通过learning log，由于名为index的URL模式定义在urls.py中，可确保链接是最新的 编写父模块块标签“ 【% block content %】【% endblock content %】”（content为模块名） 2、编写子模块index.html：首句必须包括”【% extends \u0026ldquo;learning_logs/base.html\u0026rdquo; %】”以指定继承于哪个父模块。编写子模块块标签。 （4）显示Topics中特定主题topic的详细页面，URL模式：path(\u0026rsquo;topics/int:topic_id/\u0026rsquo;, vies.topic, name = \u0026rsquo;topic\u0026rsquo;) ，（例如http://localhost:8000/topicd/1）编写视图函数、模版\n10、Django5.0之后使用内置logout无法用get方法，只能使用post方法，否则返回405.\n"},{
  "section": "Blog",
  "slug": "/blog/git-pull%E8%A6%86%E7%9B%96%E6%9C%AC%E5%9C%B0%E5%90%8E%E5%9B%9E%E6%BB%9A/",
  "title": "git pull 覆盖本地仓库后回滚",
  "description": "this is meta description",
  "date": "April 4, 2022",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_q80_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"184\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_q80_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Application, Data",
  "tags": "nextjs, tailwind",
  "content":"1、git reflog \u0026ndash;date=iso查看仓库变更历史（按q退出日志）\n2、寻找需要退回的版本号HEAD@{n}（日志左侧参数）\n3、git reset \u0026ndash;hard HEAD@{n} 如git reset \u0026ndash;hard 78ac8a0\n"},{
  "section": "Blog",
  "slug": "/blog/hugo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/",
  "title": "Hugo-github常见问题",
  "description": "this is meta description",
  "date": "April 4, 2022",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_q80_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"184\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_q80_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Application, Data",
  "tags": "nextjs, tailwind",
  "content":"1、github部署hugo博客后，可能出现文章地址被重定向到localhost的情况，这时需要在仓库中将index.html和index.xml中的文章url改为仓库url，即../post/\u0026hellip;..\n2、若在github远端修改仓库代码，则在将public push时可能会出现： error: failed to push some refs to \u0026lsquo;https://github.com/xxcdu/xxcdu.github.io/' hint: Updates were rejected because the tip of your current branch is behind hint: its remote counterpart. If you want to integrate the remote changes, hint: use \u0026lsquo;git pull\u0026rsquo; before pushing again. hint: See the \u0026lsquo;Note about fast-forwards\u0026rsquo; in \u0026lsquo;git push \u0026ndash;help\u0026rsquo; for details.显示远端被修改。 这时需要先拉取远程更改：git pull origin master，在本地分支上更改冲突文件，再git add 提交推送。\n3、远程部署后，想在本地启动服务并修改网站文件，使用“hugo server -t m10c –buildDrafts”可能出现本地服务启动后，主页中没有文章链接的情况，这时查看public 根目录文件夹的index.html时，发现根本没有与链接文章url有关的的部分。更新public后，使用“hugo server -D”启动服务后主页出现了文章链接，但点开后跳转到了远程服务器的地址如https://xxcdu.github.io/post/start-hugo/而不是本地文章地址http://localhost:1313/post/hugo-github%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/，这可能是由于url冲突，需配置好网站根目录下的hugo.toml文件，将baseURL设置为远程部署的地址url。修改后发现已可以在访问本地站点。且注意使用时不要通过 “hugo server -t m10c –buildDrafts”启动（原因不明），而是通过“hugo server -D“方式启动服务。\n"},{
  "section": "Blog",
  "slug": "/blog/python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/",
  "title": "python基本语法",
  "description": "this is meta description",
  "date": "April 4, 2022",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_q80_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"184\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_q80_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Application, Data",
  "tags": "nextjs, tailwind",
  "content":"1、格式化字符串：f”······“ first_name = Bili last_name = Halidon full_name = f\u0026quot;{first_name}{last_name}\u0026quot; print(f\u0026quot;Hello, {full_name.title()}\u0026quot;)\n2、列表 a = [\u0026lsquo;a\u0026rsquo;, 1, \u0026lsquo;abc\u0026rsquo;]\n3、复制列表 a = b[:] a = b是引用同一个列表 实验： a = [\u0026lsquo;a\u0026rsquo;, 1, \u0026ldquo;b\u0026rdquo;] b = a c = a[:] a.append(\u0026lsquo;c\u0026rsquo;) print(f\u0026quot;a = {a}\u0026quot;) print(f\u0026quot;b = {b}\u0026quot;) print(f\u0026quot;c = {c}\u0026quot;)\n结果： a = [\u0026lsquo;a\u0026rsquo;, 1, \u0026lsquo;b\u0026rsquo;, \u0026lsquo;c\u0026rsquo;] b = [\u0026lsquo;a\u0026rsquo;, 1, \u0026lsquo;b\u0026rsquo;, \u0026lsquo;c\u0026rsquo;] c = [\u0026lsquo;a\u0026rsquo;, 1, \u0026lsquo;b\u0026rsquo;]\n4、元组a = （1, 2, 3）\n5、字典： dic = {\u0026lsquo;a\u0026rsquo;:1,\u0026lsquo;b\u0026rsquo;:2} 添加键值对：dic[\u0026lsquo;c\u0026rsquo;] = 3 删除键值对：del dic[\u0026lsquo;c\u0026rsquo;] 遍历键值对：for key, value in dic(): print(f\u0026quot;{key}:{value}\u0026quot;) 遍历所有键：for i in dic.keys(): print(i) 遍历所有值：for i in dic.values():\n6、防止函数修改字符串：使用切片副本。function_name(list_name[ : ])\n7、传递任意数量实参： def make_pizza(size, *toppings):······\n8、使用任意数量的关键字实参（键值对）：def build_profile(first, last, **user_info):······\n9、类： class dog: def init(self, name, age): self.name = name self.age = age\ndef sit(self):\rprint(f\u0026quot;{self.name} is sitting now\u0026quot;)\r实例：my_dog = dog(\u0026lsquo;sam\u0026rsquo;, 6) 访问属性：my_dog.name\n10、继承：super（）：可调用父类方法 class ElectrnicCar(Car): def int(self, make, model): super().init(make,model)\n11、打开读取整个文件：open(\u0026lsquo;01.txt\u0026rsquo;, \u0026lsquo;w\u0026rsquo;)写模式，\u0026lsquo;r\u0026rsquo;读模式，‘r+’读写模式 with open(\u0026rsquo;test.txt\u0026rsquo;) as file01: content = file01.read print(content)\n"},{
  "section": "Blog",
  "slug": "/blog/start-hugo/",
  "title": "start-hugo",
  "description": "this is meta description",
  "date": "April 4, 2022",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_q80_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"184\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_q80_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Application, Data",
  "tags": "nextjs, tailwind",
  "content":"条件：配置好git，下载hugo，将hugo所在目录放入环境变量\n1、创建网站：hugo new site /path/to/site\n2、克隆主题：git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c（具体方式看主题中的介绍） 主题网址：https://themes.gohugo.io/ 下载主题后进入hugo.toml或config.toml修改theme\n3、启动：hugo server -t m10c \u0026ndash;buildDrafts\n4、新建文章：hugo new post/test01.md\n5、部署到github： hugo \u0026ndash;theme=m10c \u0026ndash;baseURL=\u0026ldquo;https://xxcdu.github.io/\" \u0026ndash;buildDrafts 生成一个public文件夹\n6、进入public后，传入github：git init git add . git commit -m \u0026quot; \u0026quot;\n7、将public远程关联到github：git remote add origin https://github.com/xxcdu/xxcdu.github.io/\n8、将public推上去:git push -u origin master\n9、更新：生成新的public，git add 、commit推送到github\n10、本地启动服务用hugo server -D\ngit add时提示“warning: LF(换行) will be replaced by CRLF（回车换行）”： 1、成因：Dos和Windows平台： 使用回车（CR）和换行（LF）两个字符来结束 一行，回车+换行(CR+LF)，即“\\r\\n”； Mac 和 Linux平台：只使用换行（LF）一个字符来结束一行，即“\\n”。。。 许多 Windows 上的编辑器会悄悄把行尾的换行（LF）字符转换成回车（CR）和换行（LF），或在用户按下 Enter 键时，插入回车（CR）和换行（LF）两个字符 2、解决： 一、#提交时转换为LF，检出时转换为CRLF $ git config \u0026ndash;global core.autocrlf true 二、纯windows：#提交检出均不转换 $ git config \u0026ndash;global core.autocrlf false\n初次运行git时SSL certificate problem: unable to get local issuer ： 1、certificate错误的成因：当通过HTTPS访问Git远程仓库的时候，如果服务器上的SSL证书未经过第三方机构认证，git就会报错。 2、解决方法：需关掉sslverify ：git config \u0026ndash;system http.sslverify false（当前用户）git config \u0026ndash;global http.sslverify false（全局用户） git config http.sslverify false（当前仓库） 若嵌套git子模块时遇到：npm config set strict-ssl false\n"},{
  "section": "Blog",
  "slug": "/blog/%E6%9B%B4%E6%96%B0hugo/",
  "title": "更新hugo",
  "description": "this is meta description",
  "date": "April 4, 2022",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_q80_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"184\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_q80_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Application, Data",
  "tags": "nextjs, tailwind",
  "content":"1、在根目录下builddrafts生成public文件夹 例如：hugo \u0026ndash;theme=hugoplate \u0026ndash;baseURL=\u0026ldquo;https://xxcdu.github.io/\" \u0026ndash;buildDrafts\n2、进入public文件夹\n3、git add .\n4、git commit -m \u0026quot; \u0026quot;\n5、git push -u origin master\n"}]
